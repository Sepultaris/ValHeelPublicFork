using System;
using System.Collections.Generic;
using System.Linq;

using ACE.Database;
using ACE.Database.Models.World;
using ACE.Entity;
using ACE.Entity.Enum;
using ACE.Entity.Enum.Properties;
using ACE.Entity.Models;
using ACE.Server.Entity;
using ACE.Server.Entity.Actions;
using ACE.Server.Factories;
using ACE.Server.Managers;
using ACE.Server.Network.GameEvent.Events;
using ACE.Server.Network.GameMessages.Messages;

namespace ACE.Server.WorldObjects
{
    partial class Creature
    {
        public TreasureDeath DeathTreasure { get => DeathTreasureType.HasValue ? DatabaseManager.World.GetCachedDeathTreasure(DeathTreasureType.Value) : null; }

        private bool onDeathEntered = false;

        /// <summary>
        /// Called when a monster or player dies, in conjunction with Die()
        /// </summary>
        /// <param name="lastDamager">The last damager that landed the death blow</param>
        /// <param name="damageType">The damage type for the death message</param>
        /// <param name="criticalHit">True if the death blow was a critical hit, generates a critical death message</param>
        public virtual DeathMessage OnDeath(DamageHistoryInfo lastDamager, DamageType damageType, bool criticalHit = false)
        {
            if (onDeathEntered)
                return GetDeathMessage(lastDamager, damageType, criticalHit);

            onDeathEntered = true;

            IsTurning = false;
            IsMoving = false;

            //QuestManager.OnDeath(lastDamager?.TryGetAttacker());

            if (KillQuest != null)
                OnDeath_HandleKillTask(KillQuest);
            if (KillQuest2 != null)
                OnDeath_HandleKillTask(KillQuest2);
            if (KillQuest3 != null)
                OnDeath_HandleKillTask(KillQuest3);

            if (!IsOnNoDeathXPLandblock)
                OnDeath_GrantXP();

            return GetDeathMessage(lastDamager, damageType, criticalHit);
        }

        public DeathMessage GetDeathMessage(DamageHistoryInfo lastDamagerInfo, DamageType damageType, bool criticalHit = false)
        {
            var lastDamager = lastDamagerInfo?.TryGetAttacker();

            if (lastDamagerInfo == null || lastDamagerInfo.Guid == Guid || lastDamager is Hotspot)
                return Strings.General[1];

            var deathMessage = Strings.GetDeathMessage(damageType, criticalHit);

            // if killed by a player, send them a message
            if (lastDamagerInfo.IsPlayer)
            {
                if (criticalHit && this is Player)
                    deathMessage = Strings.PKCritical[0];

                var killerMsg = string.Format(deathMessage.Killer, Name);

                if (lastDamager is Player playerKiller)
                    playerKiller.Session.Network.EnqueueSend(new GameEventKillerNotification(playerKiller.Session, killerMsg));
            }
            return deathMessage;
        }

        /// <summary>
        /// Kills a player/creature and performs the full death sequence
        /// </summary>
        public void Die()
        {
            Die(DamageHistory.LastDamager, DamageHistory.TopDamager);
        }

        private bool dieEntered = false;

        /// <summary>
        /// Performs the full death sequence for non-Player creatures
        /// </summary>
        protected virtual void Die(DamageHistoryInfo lastDamager, DamageHistoryInfo topDamager)
        {
            if (dieEntered) return;

            dieEntered = true;

            UpdateVital(Health, 0);

            if (topDamager != null && !IsCombatPet)
            {
                KillerId = topDamager.Guid.Full;

                if (topDamager.IsPlayer)
                {
                    var topDamagerPlayer = topDamager.TryGetAttacker();
                    if (topDamagerPlayer != null)
                    {
                        topDamagerPlayer.CreatureKills++;

                        var hcPlayer = topDamagerPlayer as Player;

                        if (hcPlayer != null && hcPlayer.Hardcore)
                        {
                            if (hcPlayer.BankedPyreals == null)
                                hcPlayer.BankedPyreals = 0;

                            hcPlayer.BankedPyreals += 133;
                            hcPlayer.HcPyrealsWon += 133;
                        }
                    }
                }
                if (topDamager.PetOwner != null)
                {
                    var topDamagerPet = topDamager.TryGetAttacker();

                    if (topDamagerPet != null && topDamagerPet.PetOwner != null)
                    {
                        var ownerId = topDamagerPet.PetOwner;
                        var topDamagerPetOwner = PlayerManager.FindByGuid((uint)ownerId);

                        if (topDamagerPetOwner != null)
                        {
                            topDamagerPetOwner.CreatureKills++;

                            if (topDamagerPetOwner.Hardcore)
                            {
                                if (topDamagerPetOwner.BankedPyreals == null)
                                    topDamagerPetOwner.BankedPyreals = 0;

                                topDamagerPetOwner.BankedPyreals += 133;
                                topDamagerPetOwner.HcPyrealsWon += 133;
                            }
                        }
                    }
                }
            }
            if (IsCombatPet)
            {
                CurrentMotionState = new Motion(MotionStance.NonCombat, MotionCommand.Ready);
                //IsMonster = false;

                PhysicsObj.StopCompletely(true);

                // broadcast death animation
                var motionDeath1 = new Motion(MotionStance.NonCombat, MotionCommand.Dead);
                var deathAnimLength1 = ExecuteMotion(motionDeath1);

                var dieChain1 = new ActionChain();

                // wait for death animation to finish
                //var deathAnimLength = DatManager.PortalDat.ReadFromDat<MotionTable>(MotionTableId).GetAnimationLength(MotionCommand.Dead);
                dieChain1.AddDelaySeconds(deathAnimLength1);

                dieChain1.AddAction(this, () =>
                {
                    Destroy();
                });

                dieChain1.EnqueueChain();
            }
            else
            {
                CurrentMotionState = new Motion(MotionStance.NonCombat, MotionCommand.Ready);
                //IsMonster = false;

                PhysicsObj.StopCompletely(true);

                // broadcast death animation
                var motionDeath = new Motion(MotionStance.NonCombat, MotionCommand.Dead);
                var deathAnimLength = ExecuteMotion(motionDeath);

                EmoteManager.OnDeath(lastDamager);

                var dieChain = new ActionChain();

                // wait for death animation to finish
                //var deathAnimLength = DatManager.PortalDat.ReadFromDat<MotionTable>(MotionTableId).GetAnimationLength(MotionCommand.Dead);
                dieChain.AddDelaySeconds(deathAnimLength);

                dieChain.AddAction(this, () =>
                {
                    CreateCorpse(topDamager);
                    Destroy();
                });

                dieChain.EnqueueChain();
            }
        }

        /// <summary>
        /// Called when an admin player uses the /smite command
        /// to instantly kill a creature
        /// </summary>
        public void Smite(WorldObject smiter, bool useTakeDamage = false)
        {
            if (useTakeDamage)
            {
                // deal remaining damage
                TakeDamage(smiter, DamageType.Bludgeon, Health.Current);
            }
            else
            {
                OnDeath();
                var smiterInfo = new DamageHistoryInfo(smiter);
                Die(smiterInfo, smiterInfo);
            }
        }

        public void OnDeath()
        {
            OnDeath(null, DamageType.Undef);
        }

        /// <summary>
        /// Grants XP to players in damage history
        /// </summary>
        public void OnDeath_GrantXP()
        {
            if (this is Player && PlayerKillerStatus == PlayerKillerStatus.PKLite)
                return;

            var totalHealth = DamageHistory.TotalHealth;

            if (totalHealth == 0)
                return;

            foreach (var kvp in DamageHistory.TotalDamage)
            {
                var damager = kvp.Value.TryGetAttacker();

                var playerDamager = damager as Player;

                if (playerDamager == null && kvp.Value.PetOwner != null)
                    playerDamager = kvp.Value.TryGetPetOwner();

                if (playerDamager == null)
                    continue;

                var totalDamage = kvp.Value.TotalDamage;

                var damagePercent = totalDamage / totalHealth;

                var totalXP = (XpOverride ?? 0) * damagePercent;

                playerDamager.EarnXP((long)Math.Round(totalXP), XpType.Kill);
                

                // handle luminance
                if (LuminanceAward != null)
                {
                    var totalLuminance = (long)Math.Round(LuminanceAward.Value * damagePercent);
                    playerDamager.EarnLuminance(totalLuminance, XpType.Kill);
                }
            }
        }

        /// <summary>
        /// Handles the KillTask for a killed creature
        /// </summary>
        public void OnDeath_HandleKillTask(string killQuest)
        {
            var receivers = KillTask_GetEligibleReceivers(killQuest);

            foreach (var receiver in receivers)
            {
                var damager = receiver.Value.TryGetAttacker();

                var player = damager as Player;

                if (player == null && receiver.Value.PetOwner != null)
                    player = receiver.Value.TryGetPetOwner();

                if (player != null)
                    player.QuestManager.HandleKillTask(killQuest, this);
            }
        }

        /// <summary>
        /// Returns a flattened structure of eligible Players, Fellows, and CombatPets
        /// </summary>
        public Dictionary<ObjectGuid, DamageHistoryInfo> KillTask_GetEligibleReceivers(string killQuest)
        {
            // http://acpedia.org/wiki/Announcements_-_2012/12_-_A_Growing_Twilight#Release_Notes

            var questName = QuestManager.GetQuestName(killQuest);

            // we are using DamageHistoryInfo here, instead of Creature or WorldObjectInfo
            // WeakReference<CombatPet> may be null for expired CombatPets, but we still need the WeakReference<PetOwner> references

            var receivers = new Dictionary<ObjectGuid, DamageHistoryInfo>();

            foreach (var kvp in DamageHistory.TotalDamage)
            {
                if (kvp.Value.TotalDamage <= 0)
                    continue;

                var damager = kvp.Value.TryGetAttacker();

                var playerDamager = damager as Player;

                if (playerDamager == null && kvp.Value.PetOwner != null)
                {
                    // handle combat pets
                    playerDamager = kvp.Value.TryGetPetOwner();

                    if (playerDamager != null && playerDamager.QuestManager.HasQuest(questName))
                    {
                        // only add combat pet to eligible receivers if player has quest, and allow_summoning_killtask_multicredit = true (default, retail)
                        if (DamageHistory.HasDamager(playerDamager, true) && PropertyManager.GetBool("allow_summoning_killtask_multicredit").Item)
                            receivers[kvp.Value.Guid] = kvp.Value;
                        else
                            receivers[playerDamager.Guid] = new DamageHistoryInfo(playerDamager);
                    }

                    // regardless if combat pet is eligible, we still want to continue traversing to the pet owner, and possibly fellows

                    // in a scenario where combat pet does 100% damage:

                    // - regardless if allow_summoning_killtask_multicredit is enabled/disabled, it should continue traversing into pet owner and possibly their fellows

                    // - if pet owner doesn't have kill task, and fellow_kt_killer=false, any fellows with the task should still receive 1 credit
                }

                if (playerDamager == null)
                    continue;

                // factors:
                // - has quest
                // - is killer (last damager, top damager, or any damager? in current context, considering it to be any damager)
                // - has fellowship
                // - server option: fellow_kt_killer
                // - server option: fellow_kt_landblock

                if (playerDamager.QuestManager.HasQuest(questName))
                {
                    // just add a fake DamageHistoryInfo for reference
                    receivers[playerDamager.Guid] = new DamageHistoryInfo(playerDamager);
                }
                else if (PropertyManager.GetBool("fellow_kt_killer").Item)
                {
                    // if this option is enabled (retail default), the killer is required to have kill task
                    // for it to share with fellowship
                    continue;
                }

                // we want to add fellowship members in a flattened structure
                // in this inner loop, instead of the outer loop

                // scenarios:

                // i am a summoner in a fellowship with 1 other player
                // we both have a killtask

                // - my combatpet does 100% damage to the monster
                // result: i get 1 killtask credit, and my fellow gets 1 killtask credit

                // - my combatpet does 50% damage to monster, and i do 50% damage
                // result: i get 2 killtask credits (1 if allow_summoning_killtask_multicredit server option is disabled), and my fellow gets 1 killtask credit

                // - my combatpet does 33% damage to monster, i do 33% damage, and fellow does 33% damage
                // result: same as previous scenario

                // 2 players not in a fellowship both have a killtask
                // they each do 50% damage to monster

                // result: both players receive killtask credit

                if (playerDamager.Fellowship == null)
                    continue;

                // share with fellows in kill task range
                var fellows = playerDamager.Fellowship.WithinRange(playerDamager);

                foreach (var fellow in fellows)
                {
                    if (fellow.QuestManager.HasQuest(questName))
                        receivers[fellow.Guid] = new DamageHistoryInfo(fellow);
                }
            }
            return receivers;
        }

        /// <summary>
        /// Create a corpse for both creatures and players currently
        /// </summary>
        protected void CreateCorpse(DamageHistoryInfo killer)
        {
            if (NoCorpse)
            {
                var loot = GenerateTreasure(killer, null);

                foreach(var item in loot)
                {
                    item.Location = new Position(Location);
                    LandblockManager.AddObject(item);
                }
                return;
            }

            var cachedWeenie = DatabaseManager.World.GetCachedWeenie("corpse");

            var corpse = WorldObjectFactory.CreateNewWorldObject(cachedWeenie) as Corpse;

            var prefix = "Corpse";

            if (TreasureCorpse)
            {
                // Hardcoded values from PCAPs of Treasure Pile Corpses, everything else lines up exactly with existing corpse weenie
                corpse.SetupTableId  = 0x02000EC4;
                corpse.MotionTableId = 0x0900019B;
                corpse.SoundTableId  = 0x200000C2;
                corpse.ObjScale      = 0.4f;

                prefix = "Treasure";
            }
            else
            {
                corpse.SetupTableId = SetupTableId;
                corpse.MotionTableId = MotionTableId;
                //corpse.SoundTableId = SoundTableId; // Do not change sound table for corpses
                corpse.PaletteBaseDID = PaletteBaseDID;
                corpse.ClothingBase = ClothingBase;
                corpse.PhysicsTableId = PhysicsTableId;

                if (ObjScale.HasValue)
                    corpse.ObjScale = ObjScale;
                if (PaletteTemplate.HasValue)
                    corpse.PaletteTemplate = PaletteTemplate;
                if (Shade.HasValue)
                    corpse.Shade = Shade;
                //if (Translucency.HasValue) // Shadows have Translucency but their corpses do not, videographic evidence can be found on YouTube.
                //corpse.Translucency = Translucency;


                // Pull and save objdesc for correct corpse apperance at time of death
                var objDesc = CalculateObjDesc();

                corpse.Biota.PropertiesAnimPart = objDesc.AnimPartChanges.Clone(corpse.BiotaDatabaseLock);

                corpse.Biota.PropertiesPalette = objDesc.SubPalettes.Clone(corpse.BiotaDatabaseLock);

                corpse.Biota.PropertiesTextureMap = objDesc.TextureChanges.Clone(corpse.BiotaDatabaseLock);
            }

            // use the physics location for accuracy,
            // especially while jumping
            corpse.Location = PhysicsObj.Position.ACEPosition();

            corpse.VictimId = Guid.Full;
            corpse.Name = $"{prefix} of {Name}";

            // set 'killed by' for looting rights
            var killerName = "misadventure";
            if (killer != null)
            {
                if (!(Generator != null && Generator.Guid == killer.Guid) && Guid != killer.Guid)
                {
                    if (!string.IsNullOrWhiteSpace(killer.Name))
                        killerName = killer.Name.TrimStart('+');  // vtank requires + to be stripped for regex matching.

                    corpse.KillerId = killer.Guid.Full;

                    if (killer.PetOwner != null)
                    {
                        var petOwner = killer.TryGetPetOwner();
                        if (petOwner != null)
                            corpse.KillerId = petOwner.Guid.Full;
                    }

                    if (killer.DoTOwnerGuid != 0)
                    {
                        foreach (var p in PlayerManager.GetAllOnline())
                        {
                            if (killer.DoTOwnerGuid != 0)
                            {
                                if (p.Guid.Full == killer.DoTOwnerGuid)
                                {
                                    if (!string.IsNullOrWhiteSpace(killer.Name))
                                        killerName = p.Name.TrimStart('+');  // vtank requires + to be stripped for regex matching.

                                    KillerId = p.Guid.Full;
                                }
                            }
                        }
                    }
                }
            }

            corpse.LongDesc = $"Killed by {killerName}.";

            bool saveCorpse = false;

            var player = this as Player;

            if (player != null)
            {
                corpse.SetPosition(PositionType.Location, corpse.Location);
                var dropped = player.CalculateDeathItems(corpse);
                corpse.RecalculateDecayTime(player);

                if (dropped.Count > 0)
                    saveCorpse = true;

                if ((player.Location.Cell & 0xFFFF) < 0x100)
                {
                    player.SetPosition(PositionType.LastOutsideDeath, new Position(corpse.Location));
                    player.Session.Network.EnqueueSend(new GameMessagePrivateUpdatePosition(player, PositionType.LastOutsideDeath, corpse.Location));

                    if (dropped.Count > 0)
                        player.Session.Network.EnqueueSend(new GameMessageSystemChat($"Your corpse is located at ({corpse.Location.GetMapCoordStr()}).", ChatMessageType.Broadcast));
                }

                var isPKdeath = player.IsPKDeath(killer);
                var isPKLdeath = player.IsPKLiteDeath(killer);

                if (isPKdeath)
                    corpse.PkLevel = PKLevel.PK;

                if (!isPKdeath && !isPKLdeath)
                {
                    var miserAug = player.AugmentationLessDeathItemLoss * 5;
                    if (miserAug > 0)
                        player.Session.Network.EnqueueSend(new GameMessageSystemChat($"Your augmentation has reduced the number of items you can lose by {miserAug}!", ChatMessageType.Broadcast));
                }

                if (dropped.Count == 0 && !isPKLdeath)
                    player.Session.Network.EnqueueSend(new GameMessageSystemChat($"You have retained all your items. You do not need to recover your corpse!", ChatMessageType.Broadcast));
            }
            else
            {                
                corpse.IsMonster = true;

                if (killer.DoTOwnerGuid != 0)
                {
                    corpse.KillerId = (uint?)killer.DoTOwnerGuid;
                }

                if (killer.IsPlayer)
                GenerateTreasure(killer, corpse);

                if (killer.PetOwner != null && !killer.IsPlayer)
                {
                    var petOwner = killer.TryGetPetOwner();

                    if (corpse.KillerId != null && petOwner != null)
                    {
                        if (corpse.KillerId == petOwner.Guid.Full)
                            corpse.KillerId = petOwner.Guid.Full;

                        GenerateTreasure(killer, corpse);
                    }
                }
                if (IsOnLootMultiplierLandblock)
                {
                    GenerateTreasure(killer, corpse);
                }

                if (killer != null && killer.IsPlayer)
                {
                    if (Level >= 100)
                    {
                        CanGenerateRare = true;
                    }
                    else
                    {
                        var killerPlayer = killer.TryGetAttacker();
                        if (killerPlayer != null && Level > killerPlayer.Level)
                            CanGenerateRare = true;
                    }
                }
                else
                    CanGenerateRare = false;
            }

            corpse.RemoveProperty(PropertyInt.Value);

            if (CanGenerateRare && killer != null)
                corpse.TryGenerateRare(killer);

            corpse.InitPhysicsObj();

            // persist the original creature velocity (only used for falling) to corpse
            corpse.PhysicsObj.Velocity = PhysicsObj.Velocity;

            corpse.EnterWorld();

            if (player != null)
            {
                if (corpse.PhysicsObj == null || corpse.PhysicsObj.Position == null)
                    log.Debug($"[CORPSE] {Name}'s corpse (0x{corpse.Guid}) failed to spawn! Tried at {player.Location.ToLOCString()}");
                else
                    log.Debug($"[CORPSE] {Name}'s corpse (0x{corpse.Guid}) is located at {corpse.PhysicsObj.Position}");
            }

            if (saveCorpse)
            {
                corpse.SaveBiotaToDatabase();

                foreach (var item in corpse.Inventory.Values)
                    item.SaveBiotaToDatabase();
            }
        }

        public bool CanGenerateRare
        {
            get => GetProperty(PropertyBool.CanGenerateRare) ?? false;
            set { if (!value) RemoveProperty(PropertyBool.CanGenerateRare); else SetProperty(PropertyBool.CanGenerateRare, value); }
        }

        /// <summary>
        /// Transfers generated treasure from creature to corpse
        /// </summary>
        private List<WorldObject> GenerateTreasure(DamageHistoryInfo killer, Corpse corpse)
        {
            var droppedItems = new List<WorldObject>();

            // create death treasure from loot generation factory
            if (DeathTreasure != null)
            {
                List<WorldObject> items = LootGenerationFactory.CreateRandomLootObjects(DeathTreasure);
                foreach (WorldObject wo in items)
                {
                    if (corpse != null)
                        corpse.TryAddToInventory(wo);
                    else
                        droppedItems.Add(wo);

                    DoCantripLogging(killer, wo);
                }
            }

            // contain and non-wielded treasure create
            if (Biota.PropertiesCreateList != null)
            {
                var createList = Biota.PropertiesCreateList.Where(i => (i.DestinationType & DestinationType.Contain) != 0 ||
                                (i.DestinationType & DestinationType.Treasure) != 0 && (i.DestinationType & DestinationType.Wield) == 0).ToList();

                var selected = CreateListSelect(createList);

                foreach (var item in selected)
                {
                    var wo = WorldObjectFactory.CreateNewWorldObject(item);

                    if (wo != null)
                    {
                        if (corpse != null)
                            corpse.TryAddToInventory(wo);
                        else
                            droppedItems.Add(wo);
                    }
                }
            }

            // move wielded treasure over, which also should include Wielded objects not marked for destroy on death.
            // allow server operators to configure this behavior due to errors in createlist post 16py data
            var dropFlags = PropertyManager.GetBool("creatures_drop_createlist_wield").Item ? DestinationType.WieldTreasure : DestinationType.Treasure;

            var wieldedTreasure = Inventory.Values.Concat(EquippedObjects.Values).Where(i => (i.DestinationType & dropFlags) != 0);
            foreach (var item in wieldedTreasure.ToList())
            {
                if (item.Bonded == BondedStatus.Destroy)
                    continue;

                if (TryDequipObjectWithBroadcasting(item.Guid, out var wo, out var wieldedLocation))
                    EnqueueBroadcast(new GameMessagePublicUpdateInstanceID(item, PropertyInstanceId.Wielder, ObjectGuid.Invalid));

                if (corpse != null)
                {
                    corpse.TryAddToInventory(item);
                    EnqueueBroadcast(new GameMessagePublicUpdateInstanceID(item, PropertyInstanceId.Container, corpse.Guid), new GameMessagePickupEvent(item));
                }
                else
                    droppedItems.Add(item);
            }

            return droppedItems;
        }

        public void DoCantripLogging(DamageHistoryInfo killer, WorldObject wo)
        {
            var epicCantrips = wo.EpicCantrips;
            var legendaryCantrips = wo.LegendaryCantrips;

            if (epicCantrips.Count > 0)
                log.Debug($"[LOOT][EPIC] {Name} ({Guid}) generated item with {epicCantrips.Count} epic{(epicCantrips.Count > 1 ? "s" : "")} - {wo.Name} ({wo.Guid}) - {GetSpellList(epicCantrips)} - killed by {killer?.Name} ({killer?.Guid})");

            if (legendaryCantrips.Count > 0)
                log.Debug($"[LOOT][LEGENDARY] {Name} ({Guid}) generated item with {legendaryCantrips.Count} legendar{(legendaryCantrips.Count > 1 ? "ies" : "y")} - {wo.Name} ({wo.Guid}) - {GetSpellList(legendaryCantrips)} - killed by {killer?.Name} ({killer?.Guid})");
        }

        public static string GetSpellList(Dictionary<int, float> spellTable)
        {
            var spells = new List<Server.Entity.Spell>();

            foreach (var kvp in spellTable)
                spells.Add(new Server.Entity.Spell(kvp.Key, false));

            return string.Join(", ", spells.Select(i => i.Name));
        }

        public bool IsOnNoDeathXPLandblock => Location != null ? NoDeathXP_Landblocks.Contains(Location.LandblockId.Landblock) : false;

        public bool IsOnLootMultiplierLandblock => Location != null ? LootMultiplier_Landblocks.Contains(Location.LandblockId.Landblock) : false;

        public bool IsOnPKLandblock => Location != null ? PKLandblock_Landblocks.Contains(Location.LandblockId.Landblock) : false;

        public bool IsOnSpeedRunLandblock => Location != null ? SpeedRunLandblock_Landblocks.Contains(Location.LandblockId.Landblock) : false;

        /// <summary>
        /// A list of landblocks the player gains no xp from creature kills
        /// </summary>
        public static HashSet<ushort> NoDeathXP_Landblocks = new HashSet<ushort>()
        {
            0x00B0,     // Colosseum Arena One
            0x00B1,     // Colosseum Arena Two
            0x00B2,     // Colosseum Arena Three
            0x00B3,     // Colosseum Arena Four
            0x00B4,     // Colosseum Arena Five
            0x5960,     // Gauntlet Arena One (Celestial Hand)
            0x5961,     // Gauntlet Arena Two (Celestial Hand)
            0x5962,     // Gauntlet Arena One (Eldritch Web)
            0x5963,     // Gauntlet Arena Two (Eldritch Web)
            0x5964,     // Gauntlet Arena One (Radiant Blood)
            0x5965,     // Gauntlet Arena Two (Radiant Blood)
            0x596B,     // Gauntlet Staging Area (All Societies)
        };

        public static HashSet<ushort> LootMultiplier_Landblocks = new HashSet<ushort>()
        {
            0x0A51,
            0x0A52,
            0x0A53,
            0x0A54,
            0x0A55,
            0x0A56,
            0x0A57,
            0x0A58,
            0x0A59,
            0x0A5A,
            0x0A5B,
            0x0A5C,
            0x0A5D,
            0x0A5E,
            0x0A5F,
            0x0A60,
            0x0A61,
            0x0A62,
            0x0A63,
            0x0A64,
            0x0A65,
            0x0A66,
            0x0A67,
            0x0A68,
            0x0A69,
            0x0B51,
            0x0B52,
            0x0B53,
            0x0B54,
            0x0B55,
            0x0B56,
            0x0B57,
            0x0B58,
            0x0B59,
            0x0B5A,
            0x0B5B,
            0x0B5C,
            0x0B5D,
            0x0B5E,
            0x0B5F,
            0x0B60,
            0x0B61,
            0x0B62,
            0x0B63,
            0x0B64,
            0x0B65,
            0x0B66,
            0x0B67,
            0x0B68,
            0x0B69,
            0x0C51,
            0x0C52,
            0x0C53,
            0x0C54,
            0x0C55,
            0x0C56,
            0x0C57,
            0x0C58,
            0x0C59,
            0x0C5A,
            0x0C5B,
            0x0C5C,
            0x0C5D,
            0x0C5E,
            0x0C5F,
            0x0C60,
            0x0C61,
            0x0C62,
            0x0C63,
            0x0C64,
            0x0C65,
            0x0C66,
            0x0C67,
            0x0C68,
            0x0C69,
            0x0D51,
            0x0D52,
            0x0D53,
            0x0D54,
            0x0D55,
            0x0D56,
            0x0D57,
            0x0D58,
            0x0D59,
            0x0D5A,
            0x0D5B,
            0x0D5C,
            0x0D5D,
            0x0D5E,
            0x0D5F,
            0x0D60,
            0x0D61,
            0x0D62,
            0x0D63,
            0x0D64,
            0x0D65,
            0x0D66,
            0x0D67,
            0x0D68,
            0x0D69,
            0x0E51,
            0x0E52,
            0x0E53,
            0x0E54,
            0x0E55,
            0x0E56,
            0x0E57,
            0x0E58,
            0x0E59,
            0x0E5A,
            0x0E5B,
            0x0E5C,
            0x0E5D,
            0x0E5E,
            0x0E5F,
            0x0E60,
            0x0E61,
            0x0E62,
            0x0E63,
            0x0E64,
            0x0E65,
            0x0E66,
            0x0E67,
            0x0E68,
            0x0E69,
            0x0F51,
            0x0F52,
            0x0F53,
            0x0F54,
            0x0F55,
            0x0F56,
            0x0F57,
            0x0F58,
            0x0F59,
            0x0F5A,
            0x0F5B,
            0x0F5C,
            0x0F5D,
            0x0F5E,
            0x0F5F,
            0x0F60,
            0x0F61,
            0x0F62,
            0x0F63,
            0x0F64,
            0x0F65,
            0x0F66,
            0x0F67,
            0x0F68,
            0x0F69,
            0x1051,
            0x1052,
            0x1053,
            0x1054,
            0x1055,
            0x1056,
            0x1057,
            0x1058,
            0x1059,
            0x105A,
            0x105B,
            0x105C,
            0x105D,
            0x105E,
            0x105F,
            0x1060,
            0x1061,
            0x1062,
            0x1063,
            0x1064,
            0x1065,
            0x1066,
            0x1067,
            0x1068,
            0x1069,
            0x1151,
            0x1152,
            0x1153,
            0x1154,
            0x1155,
            0x1156,
            0x1157,
            0x1158,
            0x1159,
            0x115A,
            0x115B,
            0x115C,
            0x115D,
            0x115E,
            0x115F,
            0x1160,
            0x1161,
            0x1162,
            0x1163,
            0x1164,
            0x1165,
            0x1166,
            0x1167,
            0x1168,
            0x1169,
            0x1251,
            0x1252,
            0x1253,
            0x1254,
            0x1255,
            0x1256,
            0x1257,
            0x1258,
            0x1259,
            0x125A,
            0x125B,
            0x125C,
            0x125D,
            0x125E,
            0x125F,
            0x1260,
            0x1261,
            0x1262,
            0x1263,
            0x1264,
            0x1265,
            0x1266,
            0x1267,
            0x1268,
            0x1269,
            0x1351,
            0x1352,
            0x1353,
            0x1354,
            0x1355,
            0x1356,
            0x1357,
            0x1358,
            0x1359,
            0x135A,
            0x135B,
            0x135C,
            0x135D,
            0x135E,
            0x135F,
            0x1360,
            0x1361,
            0x1362,
            0x1363,
            0x1364,
            0x1365,
            0x1366,
            0x1367,
            0x1368,
            0x1369,
            0x1451,
            0x1452,
            0x1453,
            0x1454,
            0x1455,
            0x1456,
            0x1457,
            0x1458,
            0x1459,
            0x145A,
            0x145B,
            0x145C,
            0x145D,
            0x145E,
            0x145F,
            0x1460,
            0x1461,
            0x1462,
            0x1463,
            0x1464,
            0x1465,
            0x1466,
            0x1467,
            0x1468,
            0x1469,
            0x1551,
            0x1552,
            0x1553,
            0x1554,
            0x1555,
            0x1556,
            0x1557,
            0x1558,
            0x1559,
            0x155A,
            0x155B,
            0x155C,
            0x155D,
            0x155E,
            0x155F,
            0x1560,
            0x1561,
            0x1562,
            0x1563,
            0x1564,
            0x1565,
            0x1566,
            0x1567,
            0x1568,
            0x1569,
            0x1651,
            0x1652,
            0x1653,
            0x1654,
            0x1655,
            0x1656,
            0x1657,
            0x1658,
            0x1659,
            0x165A,
            0x165B,
            0x165C,
            0x165D,
            0x165E,
            0x165F,
            0x1660,
            0x1661,
            0x1662,
            0x1663,
            0x1664,
            0x1665,
            0x1666,
            0x1667,
            0x1668,
            0x1669,
            0x1751,
            0x1752,
            0x1753,
            0x1754,
            0x1755,
            0x1756,
            0x1757,
            0x1758,
            0x1759,
            0x175A,
            0x175B,
            0x175C,
            0x175D,
            0x175E,
            0x175F,
            0x1760,
            0x1761,
            0x1762,
            0x1763,
            0x1764,
            0x1765,
            0x1766,
            0x1767,
            0x1768,
            0x1769,
            0x1851,
            0x1852,
            0x1853,
            0x1854,
            0x1855,
            0x1856,
            0x1857,
            0x1858,
            0x1859,
            0x185A,
            0x185B,
            0x185C,
            0x185D,
            0x185E,
            0x185F,
            0x1860,
            0x1861,
            0x1862,
            0x1863,
            0x1864,
            0x1865,
            0x1866,
            0x1867,
            0x1868,
            0x1869,
            0x1951,
            0x1952,
            0x1953,
            0x1954,
            0x1955,
            0x1956,
            0x1957,
            0x1958,
            0x1959,
            0x195A,
            0x195B,
            0x195C,
            0x195D,
            0x195E,
            0x195F,
            0x1960,
            0x1961,
            0x1962,
            0x1963,
            0x1964,
            0x1965,
            0x1966,
            0x1967,
            0x1968,
            0x1969,
            0x1A51,
            0x1A52,
            0x1A53,
            0x1A54,
            0x1A55,
            0x1A56,
            0x1A57,
            0x1A58,
            0x1A59,
            0x1A5A,
            0x1A5B,
            0x1A5C,
            0x1A5D,
            0x1A5E,
            0x1A5F,
            0x1A60,
            0x1A61,
            0x1A62,
            0x1A63,
            0x1A64,
            0x1A65,
            0x1A66,
            0x1A67,
            0x1A68,
            0x1A69,
            0x1B51,
            0x1B52,
            0x1B53,
            0x1B54,
            0x1B55,
            0x1B56,
            0x1B57,
            0x1B58,
            0x1B59,
            0x1B5A,
            0x1B5B,
            0x1B5C,
            0x1B5D,
            0x1B5E,
            0x1B5F,
            0x1B60,
            0x1B61,
            0x1B62,
            0x1B63,
            0x1B64,
            0x1B65,
            0x1B66,
            0x1B67,
            0x1B68,
            0x1B69,
            0x1C51,
            0x1C52,
            0x1C53,
            0x1C54,
            0x1C55,
            0x1C56,
            0x1C57,
            0x1C58,
            0x1C59,
            0x1C5A,
            0x1C5B,
            0x1C5C,
            0x1C5D,
            0x1C5E,
            0x1C5F,
            0x1C60,
            0x1C61,
            0x1C62,
            0x1C63,
            0x1C64,
            0x1C65,
            0x1C66,
            0x1C67,
            0x1C68,
            0x1C69,
            0x1D51,
            0x1D52,
            0x1D53,
            0x1D54,
            0x1D55,
            0x1D56,
            0x1D57,
            0x1D58,
            0x1D59,
            0x1D5A,
            0x1D5B,
            0x1D5C,
            0x1D5D,
            0x1D5E,
            0x1D5F,
            0x1D60,
            0x1D61,
            0x1D62,
            0x1D63,
            0x1D64,
            0x1D65,
            0x1D66,
            0x1D67,
            0x1D68,
            0x1D69,
            0x1E51,
            0x1E52,
            0x1E53,
            0x1E54,
            0x1E55,
            0x1E56,
            0x1E57,
            0x1E58,
            0x1E59,
            0x1E5A,
            0x1E5B,
            0x1E5C,
            0x1E5D,
            0x1E5E,
            0x1E5F,
            0x1E60,
            0x1E61,
            0x1E62,
            0x1E63,
            0x1E64,
            0x1E65,
            0x1E66,
            0x1E67,
            0x1E68,
            0x1E69,
            0x1F51,
            0x1F52,
            0x1F53,
            0x1F54,
            0x1F55,
            0x1F56,
            0x1F57,
            0x1F58,
            0x1F59,
            0x1F5A,
            0x1F5B,
            0x1F5C,
            0x1F5D,
            0x1F5E,
            0x1F5F,
            0x1F60,
            0x1F61,
            0x1F62,
            0x1F63,
            0x1F64,
            0x1F65,
            0x1F66,
            0x1F67,
            0x1F68,
            0x1F69,
            0x2051,
            0x2052,
            0x2053,
            0x2054,
            0x2055,
            0x2056,
            0x2057,
            0x2058,
            0x2059,
            0x205A,
            0x205B,
            0x205C,
            0x205D,
            0x205E,
            0x205F,
            0x2060,
            0x2061,
            0x2062,
            0x2063,
            0x2064,
            0x2065,
            0x2066,
            0x2067,
            0x2068,
            0x2069,
            0x2151,
            0x2152,
            0x2153,
            0x2154,
            0x2155,
            0x2156,
            0x2157,
            0x2158,
            0x2159,
            0x215A,
            0x215B,
            0x215C,
            0x215D,
            0x215E,
            0x215F,
            0x2160,
            0x2161,
            0x2162,
            0x2163,
            0x2164,
            0x2165,
            0x2166,
            0x2167,
            0x2168,
            0x2169,
            0x2251,
            0x2252,
            0x2253,
            0x2254,
            0x2255,
            0x2256,
            0x2257,
            0x2258,
            0x2259,
            0x225A,
            0x225B,
            0x225C,
            0x225D,
            0x225E,
            0x225F,
            0x2260,
            0x2261,
            0x2262,
            0x2263,
            0x2264,
            0x2265,
            0x2266,
            0x2267,
            0x2268,
            0x2269,
            0x2351,
            0x2352,
            0x2353,
            0x2354,
            0x2355,
            0x2356,
            0x2357,
            0x2358,
            0x2359,
            0x235A,
            0x235B,
            0x235C,
            0x235D,
            0x235E,
            0x235F,
            0x2360,
            0x2361,
            0x2362,
            0x2363,
            0x2364,
            0x2365,
            0x2366,
            0x2367,
            0x2368,
            0x2369,
            0x2451,
            0x2452,
            0x2453,
            0x2454,
            0x2455,
            0x2456,
            0x2457,
            0x2458,
            0x2459,
            0x245A,
            0x245B,
            0x245C,
            0x245D,
            0x245E,
            0x245F,
            0x2460,
            0x2461,
            0x2462,
            0x2463,
            0x2464,
            0x2465,
            0x2466,
            0x2467,
            0x2468,
            0x2469,
            0x2551,
            0x2552,
            0x2553,
            0x2554,
            0x2555,
            0x2556,
            0x2557,
            0x2558,
            0x2559,
            0x255A,
            0x255B,
            0x255C,
            0x255D,
            0x255E,
            0x255F,
            0x2560,
            0x2561,
            0x2563,
            0x2564,
            0x2565,
            0x2566,
            0x2567,
            0x2568,
            0x2569,
            0x2651,
            0x2652,
            0x2653,
            0x2654,
            0x2655,
            0x2656,
            0x2657,
            0x2658,
            0x2659,
            0x265A,
            0x265B,
            0x265C,
            0x265D,
            0x265E,
            0x265F,
            0x2660,
            0x2661,
            0x2662,
            0x2663,
            0x2664,
            0x2665,
            0x2666,
            0x2667,
            0x2668,
            0x2669,
            0x2751,
            0x2752,
            0x2753,
            0x2754,
            0x2755,
            0x2756,
            0x2757,
            0x2758,
            0x2759,
            0x275A,
            0x275B,
            0x275C,
            0x275D,
            0x275E,
            0x275F,
            0x2760,
            0x2761,
            0x2762,
            0x2763,
            0x2764,
            0x2765,
            0x2766,
            0x2767,
            0x2768,
            0x2769,
            0x2851,
            0x2852,
            0x2853,
            0x2854,
            0x2855,
            0x2856,
            0x2857,
            0x2858,
            0x2859,
            0x285A,
            0x285B,
            0x285C,
            0x285D,
            0x285E,
            0x285F,
            0x2860,
            0x2861,
            0x2862,
            0x2863,
            0x2864,
            0x2865,
            0x2866,
            0x2867,
            0x2868,
            0x2869,
            0x2951,
            0x2952,
            0x2953,
            0x2954,
            0x2955,
            0x2956,
            0x2957,
            0x2958,
            0x2959,
            0x295A,
            0x295B,
            0x295C,
            0x295D,
            0x295E,
            0x295F,
            0x2960,
            0x2961,
            0x2962,
            0x2963,
            0x2964,
            0x2965,
            0x2966,
            0x2967,
            0x2968,
            0x2969,
            0x2A51,
            0x2A52,
            0x2A53,
            0x2A54,
            0x2A55,
            0x2A56,
            0x2A57,
            0x2A58,
            0x2A59,
            0x2A5A,
            0x2A5B,
            0x2A5C,
            0x2A5D,
            0x2A5E,
            0x2A5F,
            0x2A60,
            0x2A61,
            0x2A62,
            0x2A63,
            0x2A64,
            0x2A65,
            0x2A66,
            0x2A67,
            0x2A68,
            0x2A69,
            0x2B51,
            0x2B52,
            0x2B53,
            0x2B54,
            0x2B55,
            0x2B56,
            0x2B57,
            0x2B58,
            0x2B59,
            0x2B5A,
            0x2B5B,
            0x2B5C,
            0x2B5D,
            0x2B5E,
            0x2B5F,
            0x2B60,
            0x2B61,
            0x2B62,
            0x2B63,
            0x2B64,
            0x2B65,
            0x2B66,
            0x2B67,
            0x2B68,
            0x2B69,
            0x2C51,
            0x2C52,
            0x2C53,
            0x2C54,
            0x2C55,
            0x2C56,
            0x2C57,
            0x2C58,
            0x2C59,
            0x2C5A,
            0x2C5B,
            0x2C5C,
            0x2C5D,
            0x2C5E,
            0x2C5F,
            0x2C60,
            0x2C61,
            0x2C62,
            0x2C63,
            0x2C64,
            0x2C65,
            0x2C66,
            0x2C67,
            0x2C68,
            0x2C69,
            0x2D51,
            0x2D52,
            0x2D53,
            0x2D54,
            0x2D55,
            0x2D56,
            0x2D57,
            0x2D58,
            0x2D59,
            0x2D5A,
            0x2D5B,
            0x2D5C,
            0x2D5D,
            0x2D5E,
            0x2D5F,
            0x2D60,
            0x2D61,
            0x2D62,
            0x2D63,
            0x2D64,
            0x2D65,
            0x2D66,
            0x2D67,
            0x2D68,
            0x2D69,
            0x2E51,
            0x2E52,
            0x2E53,
            0x2E54,
            0x2E55,
            0x2E56,
            0x2E57,
            0x2E58,
            0x2E59,
            0x2E5A,
            0x2E5B,
            0x2E5C,
            0x2E5D,
            0x2E5E,
            0x2E5F,
            0x2E60,
            0x2E61,
            0x2E62,
            0x2E63,
            0x2E64,
            0x2E65,
            0x2E66,
            0x2E67,
            0x2E68,
            0x2E69,
            0x2F51,
            0x2F52,
            0x2F53,
            0x2F54,
            0x2F55,
            0x2F56,
            0x2F57,
            0x2F58,
            0x2F59,
            0x2F5A,
            0x2F5B,
            0x2F5C,
            0x2F5D,
            0x2F5E,
            0x2F5F,
            0x2F60,
            0x2F61,
            0x2F62,
            0x2F63,
            0x2F64,
            0x2F65,
            0x2F66,
            0x2F67,
            0x2F68,
            0x2F69,
            0x3051,
            0x3052,
            0x3053,
            0x3054,
            0x3055,
            0x3056,
            0x3057,
            0x3058,
            0x3059,
            0x305A,
            0x305B,
            0x305C,
            0x305D,
            0x305E,
            0x305F,
            0x3060,
            0x3061,
            0x3062,
            0x3063,
            0x3064,
            0x3065,
            0x3066,
            0x3067,
            0x3068,
            0x3069,
            0x3151,
            0x3152,
            0x3153,
            0x3154,
            0x3155,
            0x3156,
            0x3157,
            0x3158,
            0x3159,
            0x315A,
            0x315B,
            0x315C,
            0x315D,
            0x315E,
            0x315F,
            0x3160,
            0x3161,
            0x3162,
            0x3163,
            0x3164,
            0x3165,
            0x3166,
            0x3167,
            0x3168,
            0x3169,
            0x3251,
            0x3252,
            0x3253,
            0x3254,
            0x3255,
            0x3256,
            0x3257,
            0x3258,
            0x3259,
            0x325A,
            0x325B,
            0x325C,
            0x325D,
            0x325E,
            0x325F,
            0x3260,
            0x3261,
            0x3262,
            0x3263,
            0x3264,
            0x3265,
            0x3266,
            0x3267,
            0x3268,
            0x3269,
            0x3351,
            0x3352,
            0x3353,
            0x3354,
            0x3355,
            0x3356,
            0x3357,
            0x3358,
            0x3359,
            0x335A,
            0x335B,
            0x335C,
            0x335D,
            0x335E,
            0x335F,
            0x3360,
            0x3361,
            0x3362,
            0x3363,
            0x3364,
            0x3365,
            0x3366,
            0x3367,
            0x3368,
            0x3369,
            0x3451,
            0x3452,
            0x3453,
            0x3454,
            0x3455,
            0x3456,
            0x3457,
            0x3458,
            0x3459,
            0x345A,
            0x345B,
            0x345C,
            0x345D,
            0x345E,
            0x345F,
            0x3460,
            0x3461,
            0x3462,
            0x3463,
            0x3464,
            0x3465,
            0x3466,
            0x3467,
            0x3468,
            0x3469,
            0x3551,
            0x3552,
            0x3553,
            0x3554,
            0x3555,
            0x3556,
            0x3557,
            0x3558,
            0x3559,
            0x355A,
            0x355B,
            0x355C,
            0x355D,
            0x355E,
            0x355F,
            0x3560,
            0x3561,
            0x3562,
            0x3563,
            0x3564,
            0x3565,
            0x3566,
            0x3567,
            0x3568,
            0x3569,
            0x3651,
            0x3652,
            0x3653,
            0x3654,
            0x3655,
            0x3656,
            0x3657,
            0x3658,
            0x3659,
            0x365A,
            0x365B,
            0x365C,
            0x365D,
            0x365E,
            0x365F,
            0x3660,
            0x3661,
            0x3662,
            0x3663,
            0x3664,
            0x3665,
            0x3666,
            0x3667,
            0x3668,
            0x3669,
            0x3751,
            0x3752,
            0x3753,
            0x3754,
            0x3755,
            0x3756,
            0x3757,
            0x3758,
            0x3759,
            0x375A,
            0x375B,
            0x375C,
            0x375D,
            0x375E,
            0x375F,
            0x3760,
            0x3761,
            0x3762,
            0x3763,
            0x3764,
            0x3765,
            0x3766,
            0x3767,
            0x3768,
            0x3769,
            0x3851,
            0x3852,
            0x3853,
            0x3854,
            0x3855,
            0x3856,
            0x3857,
            0x3858,
            0x3859,
            0x385A,
            0x385B,
            0x385C,
            0x385D,
            0x385E,
            0x385F,
            0x3860,
            0x3861,
            0x3862,
            0x3863,
            0x3864,
            0x3865,
            0x3866,
            0x3867,
            0x3868,
            0x3869,
            0x3951,
            0x3952,
            0x3953,
            0x3954,
            0x3955,
            0x3956,
            0x3957,
            0x3958,
            0x3959,
            0x395A,
            0x395B,
            0x395C,
            0x395D,
            0x395E,
            0x395F,
            0x3960,
            0x3961,
            0x3962,
            0x3963,
            0x3964,
            0x3965,
            0x3966,
            0x3967,
            0x3968,
            0x3969,
            0x3A51,
            0x3A52,
            0x3A53,
            0x3A54,
            0x3A55,
            0x3A56,
            0x3A57,
            0x3A58,
            0x3A59,
            0x3A5A,
            0x3A5B,
            0x3A5C,
            0x3A5D,
            0x3A5E,
            0x3A5F,
            0x3A60,
            0x3A61,
            0x3A62,
            0x3A63,
            0x3A64,
            0x3A65,
            0x3A66,
            0x3A67,
            0x3A68,
            0x3A69,
            0x3B51,
            0x3B52,
            0x3B53,
            0x3B54,
            0x3B55,
            0x3B56,
            0x3B57,
            0x3B58,
            0x3B59,
            0x3B5A,
            0x3B5B,
            0x3B5C,
            0x3B5D,
            0x3B5E,
            0x3B5F,
            0x3B60,
            0x3B61,
            0x3B62,
            0x3B63,
            0x3B64,
            0x3B65,
            0x3B66,
            0x3B67,
            0x3B68,
            0x3B69,
            0x3C51,
            0x3C52,
            0x3C53,
            0x3C54,
            0x3C55,
            0x3C56,
            0x3C57,
            0x3C58,
            0x3C59,
            0x3C5A,
            0x3C5B,
            0x3C5C,
            0x3C5D,
            0x3C5E,
            0x3C5F,
            0x3C60,
            0x3C61,
            0x3C62,
            0x3C63,
            0x3C64,
            0x3C65,
            0x3C66,
            0x3C67,
            0x3C68,
            0x3C69,
            0x3D51,
            0x3D52,
            0x3D53,
            0x3D54,
            0x3D55,
            0x3D56,
            0x3D57,
            0x3D58,
            0x3D59,
            0x3D5A,
            0x3D5B,
            0x3D5C,
            0x3D5D,
            0x3D5E,
            0x3D5F,
            0x3D60,
            0x3D61,
            0x3D62,
            0x3D63,
            0x3D64,
            0x3D65,
            0x3D66,
            0x3D67,
            0x3D68,
            0x3D69,
            0x3E51,
            0x3E52,
            0x3E53,
            0x3E54,
            0x3E55,
            0x3E56,
            0x3E57,
            0x3E58,
            0x3E59,
            0x3E5A,
            0x3E5B,
            0x3E5C,
            0x3E5D,
            0x3E5E,
            0x3E5F,
            0x3E60,
            0x3E61,
            0x3E62,
            0x3E63,
            0x3E64,
            0x3E65,
            0x3E66,
            0x3E67,
            0x3E68,
            0x3E69,
            0x3F51,
            0x3F52,
            0x3F53,
            0x3F54,
            0x3F55,
            0x3F56,
            0x3F57,
            0x3F58,
            0x3F59,
            0x3F5A,
            0x3F5B,
            0x3F5C,
            0x3F5D,
            0x3F5E,
            0x3F5F,
            0x3F60,
            0x3F61,
            0x3F62,
            0x3F63,
            0x3F64,
            0x3F65,
            0x3F66,
            0x3F67,
            0x3F68,
            0x3F69,
            0x4051,
            0x4052,
            0x4053,
            0x4054,
            0x4055,
            0x4056,
            0x4057,
            0x4058,
            0x4059,
            0x405A,
            0x405B,
            0x405C,
            0x405D,
            0x405E,
            0x405F,
            0x4060,
            0x4061,
            0x4062,
            0x4063,
            0x4064,
            0x4065,
            0x4066,
            0x4067,
            0x4068,
            0x4069,
            0x4151,
            0x4152,
            0x4153,
            0x4154,
            0x4155,
            0x4156,
            0x4157,
            0x4158,
            0x4159,
            0x415A,
            0x415B,
            0x415C,
            0x415D,
            0x415E,
            0x415F,
            0x4160,
            0x4161,
            0x4162,
            0x4163,
            0x4164,
            0x4165,
            0x4166,
            0x4167,
            0x4168,
            0x4169,
            0x4251,
            0x4252,
            0x4253,
            0x4254,
            0x4255,
            0x4256,
            0x4257,
            0x4258,
            0x4259,
            0x425A,
            0x425B,
            0x425C,
            0x425D,
            0x425E,
            0x425F,
            0x4260,
            0x4261,
            0x4262,
            0x4263,
            0x4264,
            0x4265,
            0x4266,
            0x4267,
            0x4268,
            0x4269,
            0x4351,
            0x4352,
            0x4353,
            0x4354,
            0x4355,
            0x4356,
            0x4357,
            0x4358,
            0x4359,
            0x435A,
            0x435B,
            0x435C,
            0x435D,
            0x435E,
            0x435F,
            0x4360,
            0x4361,
            0x4362,
            0x4363,
            0x4364,
            0x4365,
            0x4366,
            0x4367,
            0x4368,
            0x4369,
            0x4451,
            0x4452,
            0x4453,
            0x4454,
            0x4455,
            0x4456,
            0x4457,
            0x4458,
            0x4459,
            0x445A,
            0x445B,
            0x445C,
            0x445D,
            0x445E,
            0x445F,
            0x4460,
            0x4461,
            0x4462,
            0x4463,
            0x4464,
            0x4465,
            0x4466,
            0x4467,
            0x4468,
            0x4469,
            0x4551,
            0x4552,
            0x4553,
            0x4554,
            0x4555,
            0x4556,
            0x4557,
            0x4558,
            0x4559,
            0x455A,
            0x455B,
            0x455C,
            0x455D,
            0x455E,
            0x455F,
            0x4560,
            0x4561,
            0x4562,
            0x4563,
            0x4564,
            0x4565,
            0x4566,
            0x4567,
            0x4568,
            0x4569,
            0x4651,
            0x4652,
            0x4653,
            0x4654,
            0x4655,
            0x4656,
            0x4657,
            0x4658,
            0x4659,
            0x465A,
            0x465B,
            0x465C,
            0x465D,
            0x465E,
            0x465F,
            0x4660,
            0x4661,
            0x4662,
            0x4663,
            0x4664,
            0x4665,
            0x4666,
            0x4667,
            0x4668,
            0x4669,
            0x4751,
            0x4752,
            0x4753,
            0x4754,
            0x4755,
            0x4756,
            0x4757,
            0x4758,
            0x4759,
            0x475A,
            0x475B,
            0x475C,
            0x475D,
            0x475E,
            0x475F,
            0x4760,
            0x4761,
            0x4762,
            0x4763,
            0x4764,
            0x4765,
            0x4766,
            0x4767,
            0x4768,
            0x4769,
            0x4851,
            0x4852,
            0x4853,
            0x4854,
            0x4855,
            0x4856,
            0x4857,
            0x4858,
            0x4859,
            0x485A,
            0x485B,
            0x485C,
            0x485D,
            0x485E,
            0x485F,
            0x4860,
            0x4861,
            0x4862,
            0x4863,
            0x4864,
            0x4865,
            0x4866,
            0x4867,
            0x4868,
            0x4869,
            0x4951,
            0x4952,
            0x4953,
            0x4954,
            0x4955,
            0x4956,
            0x4957,
            0x4958,
            0x4959,
            0x495A,
            0x495B,
            0x495C,
            0x495D,
            0x495E,
            0x495F,
            0x4960,
            0x4961,
            0x4962,
            0x4963,
            0x4964,
            0x4965,
            0x4966,
            0x4967,
            0x4968,
            0x4969,
            0x4A51,
            0x4A52,
            0x4A53,
            0x4A54,
            0x4A55,
            0x4A56,
            0x4A57,
            0x4A58,
            0x4A59,
            0x4A5A,
            0x4A5B,
            0x4A5C,
            0x4A5D,
            0x4A5E,
            0x4A5F,
            0x4A60,
            0x4A61,
            0x4A62,
            0x4A63,
            0x4A64,
            0x4A65,
            0x4A66,
            0x4A67,
            0x4A68,
            0x4A69,
        };

        public static HashSet<ushort> PKLandblock_Landblocks = new HashSet<ushort>()
        {
            0x0A51,
            0x0A52,
            0x0A53,
            0x0A54,
            0x0A55,
            0x0A56,
            0x0A57,
            0x0A58,
            0x0A59,
            0x0A5A,
            0x0A5B,
            0x0A5C,
            0x0A5D,
            0x0A5E,
            0x0A5F,
            0x0A60,
            0x0A61,
            0x0A62,
            0x0A63,
            0x0A64,
            0x0A65,
            0x0A66,
            0x0A67,
            0x0A68,
            0x0A69,
            0x0B51,
            0x0B52,
            0x0B53,
            0x0B54,
            0x0B55,
            0x0B56,
            0x0B57,
            0x0B58,
            0x0B59,
            0x0B5A,
            0x0B5B,
            0x0B5C,
            0x0B5D,
            0x0B5E,
            0x0B5F,
            0x0B60,
            0x0B61,
            0x0B62,
            0x0B63,
            0x0B64,
            0x0B65,
            0x0B66,
            0x0B67,
            0x0B68,
            0x0B69,
            0x0C51,
            0x0C52,
            0x0C53,
            0x0C54,
            0x0C55,
            0x0C56,
            0x0C57,
            0x0C58,
            0x0C59,
            0x0C5A,
            0x0C5B,
            0x0C5C,
            0x0C5D,
            0x0C5E,
            0x0C5F,
            0x0C60,
            0x0C61,
            0x0C62,
            0x0C63,
            0x0C64,
            0x0C65,
            0x0C66,
            0x0C67,
            0x0C68,
            0x0C69,
            0x0D51,
            0x0D52,
            0x0D53,
            0x0D54,
            0x0D55,
            0x0D56,
            0x0D57,
            0x0D58,
            0x0D59,
            0x0D5A,
            0x0D5B,
            0x0D5C,
            0x0D5D,
            0x0D5E,
            0x0D5F,
            0x0D60,
            0x0D61,
            0x0D62,
            0x0D63,
            0x0D64,
            0x0D65,
            0x0D66,
            0x0D67,
            0x0D68,
            0x0D69,
            0x0E51,
            0x0E52,
            0x0E53,
            0x0E54,
            0x0E55,
            0x0E56,
            0x0E57,
            0x0E58,
            0x0E59,
            0x0E5A,
            0x0E5B,
            0x0E5C,
            0x0E5D,
            0x0E5E,
            0x0E5F,
            0x0E60,
            0x0E61,
            0x0E62,
            0x0E63,
            0x0E64,
            0x0E65,
            0x0E66,
            0x0E67,
            0x0E68,
            0x0E69,
            0x0F51,
            0x0F52,
            0x0F53,
            0x0F54,
            0x0F55,
            0x0F56,
            0x0F57,
            0x0F58,
            0x0F59,
            0x0F5A,
            0x0F5B,
            0x0F5C,
            0x0F5D,
            0x0F5E,
            0x0F5F,
            0x0F60,
            0x0F61,
            0x0F62,
            0x0F63,
            0x0F64,
            0x0F65,
            0x0F66,
            0x0F67,
            0x0F68,
            0x0F69,
            0x1051,
            0x1052,
            0x1053,
            0x1054,
            0x1055,
            0x1056,
            0x1057,
            0x1058,
            0x1059,
            0x105A,
            0x105B,
            0x105C,
            0x105D,
            0x105E,
            0x105F,
            0x1060,
            0x1061,
            0x1062,
            0x1063,
            0x1064,
            0x1065,
            0x1066,
            0x1067,
            0x1068,
            0x1069,
            0x1151,
            0x1152,
            0x1153,
            0x1154,
            0x1155,
            0x1156,
            0x1157,
            0x1158,
            0x1159,
            0x115A,
            0x115B,
            0x115C,
            0x115D,
            0x115E,
            0x115F,
            0x1160,
            0x1161,
            0x1162,
            0x1163,
            0x1164,
            0x1165,
            0x1166,
            0x1167,
            0x1168,
            0x1169,
            0x1251,
            0x1252,
            0x1253,
            0x1254,
            0x1255,
            0x1256,
            0x1257,
            0x1258,
            0x1259,
            0x125A,
            0x125B,
            0x125C,
            0x125D,
            0x125E,
            0x125F,
            0x1260,
            0x1261,
            0x1262,
            0x1263,
            0x1264,
            0x1265,
            0x1266,
            0x1267,
            0x1268,
            0x1269,
            0x1351,
            0x1352,
            0x1353,
            0x1354,
            0x1355,
            0x1356,
            0x1357,
            0x1358,
            0x1359,
            0x135A,
            0x135B,
            0x135C,
            0x135D,
            0x135E,
            0x135F,
            0x1360,
            0x1361,
            0x1362,
            0x1363,
            0x1364,
            0x1365,
            0x1366,
            0x1367,
            0x1368,
            0x1369,
            0x1451,
            0x1452,
            0x1453,
            0x1454,
            0x1455,
            0x1456,
            0x1457,
            0x1458,
            0x1459,
            0x145A,
            0x145B,
            0x145C,
            0x145D,
            0x145E,
            0x145F,
            0x1460,
            0x1461,
            0x1462,
            0x1463,
            0x1464,
            0x1465,
            0x1466,
            0x1467,
            0x1468,
            0x1469,
            0x1551,
            0x1552,
            0x1553,
            0x1554,
            0x1555,
            0x1556,
            0x1557,
            0x1558,
            0x1559,
            0x155A,
            0x155B,
            0x155C,
            0x155D,
            0x155E,
            0x155F,
            0x1560,
            0x1561,
            0x1562,
            0x1563,
            0x1564,
            0x1565,
            0x1566,
            0x1567,
            0x1568,
            0x1569,
            0x1651,
            0x1652,
            0x1653,
            0x1654,
            0x1655,
            0x1656,
            0x1657,
            0x1658,
            0x1659,
            0x165A,
            0x165B,
            0x165C,
            0x165D,
            0x165E,
            0x165F,
            0x1660,
            0x1661,
            0x1662,
            0x1663,
            0x1664,
            0x1665,
            0x1666,
            0x1667,
            0x1668,
            0x1669,
            0x1751,
            0x1752,
            0x1753,
            0x1754,
            0x1755,
            0x1756,
            0x1757,
            0x1758,
            0x1759,
            0x175A,
            0x175B,
            0x175C,
            0x175D,
            0x175E,
            0x175F,
            0x1760,
            0x1761,
            0x1762,
            0x1763,
            0x1764,
            0x1765,
            0x1766,
            0x1767,
            0x1768,
            0x1769,
            0x1851,
            0x1852,
            0x1853,
            0x1854,
            0x1855,
            0x1856,
            0x1857,
            0x1858,
            0x1859,
            0x185A,
            0x185B,
            0x185C,
            0x185D,
            0x185E,
            0x185F,
            0x1860,
            0x1861,
            0x1862,
            0x1863,
            0x1864,
            0x1865,
            0x1866,
            0x1867,
            0x1868,
            0x1869,
            0x1951,
            0x1952,
            0x1953,
            0x1954,
            0x1955,
            0x1956,
            0x1957,
            0x1958,
            0x1959,
            0x195A,
            0x195B,
            0x195C,
            0x195D,
            0x195E,
            0x195F,
            0x1960,
            0x1961,
            0x1962,
            0x1963,
            0x1964,
            0x1965,
            0x1966,
            0x1967,
            0x1968,
            0x1969,
            0x1A51,
            0x1A52,
            0x1A53,
            0x1A54,
            0x1A55,
            0x1A56,
            0x1A57,
            0x1A58,
            0x1A59,
            0x1A5A,
            0x1A5B,
            0x1A5C,
            0x1A5D,
            0x1A5E,
            0x1A5F,
            0x1A60,
            0x1A61,
            0x1A62,
            0x1A63,
            0x1A64,
            0x1A65,
            0x1A66,
            0x1A67,
            0x1A68,
            0x1A69,
            0x1B51,
            0x1B52,
            0x1B53,
            0x1B54,
            0x1B55,
            0x1B56,
            0x1B57,
            0x1B58,
            0x1B59,
            0x1B5A,
            0x1B5B,
            0x1B5C,
            0x1B5D,
            0x1B5E,
            0x1B5F,
            0x1B60,
            0x1B61,
            0x1B62,
            0x1B63,
            0x1B64,
            0x1B65,
            0x1B66,
            0x1B67,
            0x1B68,
            0x1B69,
            0x1C51,
            0x1C52,
            0x1C53,
            0x1C54,
            0x1C55,
            0x1C56,
            0x1C57,
            0x1C58,
            0x1C59,
            0x1C5A,
            0x1C5B,
            0x1C5C,
            0x1C5D,
            0x1C5E,
            0x1C5F,
            0x1C60,
            0x1C61,
            0x1C62,
            0x1C63,
            0x1C64,
            0x1C65,
            0x1C66,
            0x1C67,
            0x1C68,
            0x1C69,
            0x1D51,
            0x1D52,
            0x1D53,
            0x1D54,
            0x1D55,
            0x1D56,
            0x1D57,
            0x1D58,
            0x1D59,
            0x1D5A,
            0x1D5B,
            0x1D5C,
            0x1D5D,
            0x1D5E,
            0x1D5F,
            0x1D60,
            0x1D61,
            0x1D62,
            0x1D63,
            0x1D64,
            0x1D65,
            0x1D66,
            0x1D67,
            0x1D68,
            0x1D69,
            0x1E51,
            0x1E52,
            0x1E53,
            0x1E54,
            0x1E55,
            0x1E56,
            0x1E57,
            0x1E58,
            0x1E59,
            0x1E5A,
            0x1E5B,
            0x1E5C,
            0x1E5D,
            0x1E5E,
            0x1E5F,
            0x1E60,
            0x1E61,
            0x1E62,
            0x1E63,
            0x1E64,
            0x1E65,
            0x1E66,
            0x1E67,
            0x1E68,
            0x1E69,
            0x1F51,
            0x1F52,
            0x1F53,
            0x1F54,
            0x1F55,
            0x1F56,
            0x1F57,
            0x1F58,
            0x1F59,
            0x1F5A,
            0x1F5B,
            0x1F5C,
            0x1F5D,
            0x1F5E,
            0x1F5F,
            0x1F60,
            0x1F61,
            0x1F62,
            0x1F63,
            0x1F64,
            0x1F65,
            0x1F66,
            0x1F67,
            0x1F68,
            0x1F69,
            0x2051,
            0x2052,
            0x2053,
            0x2054,
            0x2055,
            0x2056,
            0x2057,
            0x2058,
            0x2059,
            0x205A,
            0x205B,
            0x205C,
            0x205D,
            0x205E,
            0x205F,
            0x2060,
            0x2061,
            0x2062,
            0x2063,
            0x2064,
            0x2065,
            0x2066,
            0x2067,
            0x2068,
            0x2069,
            0x2151,
            0x2152,
            0x2153,
            0x2154,
            0x2155,
            0x2156,
            0x2157,
            0x2158,
            0x2159,
            0x215A,
            0x215B,
            0x215C,
            0x215D,
            0x215E,
            0x215F,
            0x2160,
            0x2161,
            0x2162,
            0x2163,
            0x2164,
            0x2165,
            0x2166,
            0x2167,
            0x2168,
            0x2169,
            0x2251,
            0x2252,
            0x2253,
            0x2254,
            0x2255,
            0x2256,
            0x2257,
            0x2258,
            0x2259,
            0x225A,
            0x225B,
            0x225C,
            0x225D,
            0x225E,
            0x225F,
            0x2260,
            0x2261,
            0x2262,
            0x2263,
            0x2264,
            0x2265,
            0x2266,
            0x2267,
            0x2268,
            0x2269,
            0x2351,
            0x2352,
            0x2353,
            0x2354,
            0x2355,
            0x2356,
            0x2357,
            0x2358,
            0x2359,
            0x235A,
            0x235B,
            0x235C,
            0x235D,
            0x235E,
            0x235F,
            0x2360,
            0x2361,
            0x2362,
            0x2363,
            0x2364,
            0x2365,
            0x2366,
            0x2367,
            0x2368,
            0x2369,
            0x2451,
            0x2452,
            0x2453,
            0x2454,
            0x2455,
            0x2456,
            0x2457,
            0x2458,
            0x2459,
            0x245A,
            0x245B,
            0x245C,
            0x245D,
            0x245E,
            0x245F,
            0x2460,
            0x2461,
            0x2462,
            0x2463,
            0x2464,
            0x2465,
            0x2466,
            0x2467,
            0x2468,
            0x2469,
            0x2551,
            0x2552,
            0x2553,
            0x2554,
            0x2555,
            0x2556,
            0x2557,
            0x2558,
            0x2559,
            0x255A,
            0x255B,
            0x255C,
            0x255D,
            0x255E,
            0x255F,
            0x2560,
            0x2561,
            0x2563,
            0x2564,
            0x2565,
            0x2566,
            0x2567,
            0x2568,
            0x2569,
            0x2651,
            0x2652,
            0x2653,
            0x2654,
            0x2655,
            0x2656,
            0x2657,
            0x2658,
            0x2659,
            0x265A,
            0x265B,
            0x265C,
            0x265D,
            0x265E,
            0x265F,
            0x2660,
            0x2661,
            0x2662,
            0x2663,
            0x2664,
            0x2665,
            0x2666,
            0x2667,
            0x2668,
            0x2669,
            0x2751,
            0x2752,
            0x2753,
            0x2754,
            0x2755,
            0x2756,
            0x2757,
            0x2758,
            0x2759,
            0x275A,
            0x275B,
            0x275C,
            0x275D,
            0x275E,
            0x275F,
            0x2760,
            0x2761,
            0x2762,
            0x2763,
            0x2764,
            0x2765,
            0x2766,
            0x2767,
            0x2768,
            0x2769,
            0x2851,
            0x2852,
            0x2853,
            0x2854,
            0x2855,
            0x2856,
            0x2857,
            0x2858,
            0x2859,
            0x285A,
            0x285B,
            0x285C,
            0x285D,
            0x285E,
            0x285F,
            0x2860,
            0x2861,
            0x2862,
            0x2863,
            0x2864,
            0x2865,
            0x2866,
            0x2867,
            0x2868,
            0x2869,
            0x2951,
            0x2952,
            0x2953,
            0x2954,
            0x2955,
            0x2956,
            0x2957,
            0x2958,
            0x2959,
            0x295A,
            0x295B,
            0x295C,
            0x295D,
            0x295E,
            0x295F,
            0x2960,
            0x2961,
            0x2962,
            0x2963,
            0x2964,
            0x2965,
            0x2966,
            0x2967,
            0x2968,
            0x2969,
            0x2A51,
            0x2A52,
            0x2A53,
            0x2A54,
            0x2A55,
            0x2A56,
            0x2A57,
            0x2A58,
            0x2A59,
            0x2A5A,
            0x2A5B,
            0x2A5C,
            0x2A5D,
            0x2A5E,
            0x2A5F,
            0x2A60,
            0x2A61,
            0x2A62,
            0x2A63,
            0x2A64,
            0x2A65,
            0x2A66,
            0x2A67,
            0x2A68,
            0x2A69,
            0x2B51,
            0x2B52,
            0x2B53,
            0x2B54,
            0x2B55,
            0x2B56,
            0x2B57,
            0x2B58,
            0x2B59,
            0x2B5A,
            0x2B5B,
            0x2B5C,
            0x2B5D,
            0x2B5E,
            0x2B5F,
            0x2B60,
            0x2B61,
            0x2B62,
            0x2B63,
            0x2B64,
            0x2B65,
            0x2B66,
            0x2B67,
            0x2B68,
            0x2B69,
            0x2C51,
            0x2C52,
            0x2C53,
            0x2C54,
            0x2C55,
            0x2C56,
            0x2C57,
            0x2C58,
            0x2C59,
            0x2C5A,
            0x2C5B,
            0x2C5C,
            0x2C5D,
            0x2C5E,
            0x2C5F,
            0x2C60,
            0x2C61,
            0x2C62,
            0x2C63,
            0x2C64,
            0x2C65,
            0x2C66,
            0x2C67,
            0x2C68,
            0x2C69,
            0x2D51,
            0x2D52,
            0x2D53,
            0x2D54,
            0x2D55,
            0x2D56,
            0x2D57,
            0x2D58,
            0x2D59,
            0x2D5A,
            0x2D5B,
            0x2D5C,
            0x2D5D,
            0x2D5E,
            0x2D5F,
            0x2D60,
            0x2D61,
            0x2D62,
            0x2D63,
            0x2D64,
            0x2D65,
            0x2D66,
            0x2D67,
            0x2D68,
            0x2D69,
            0x2E51,
            0x2E52,
            0x2E53,
            0x2E54,
            0x2E55,
            0x2E56,
            0x2E57,
            0x2E58,
            0x2E59,
            0x2E5A,
            0x2E5B,
            0x2E5C,
            0x2E5D,
            0x2E5E,
            0x2E5F,
            0x2E60,
            0x2E61,
            0x2E62,
            0x2E63,
            0x2E64,
            0x2E65,
            0x2E66,
            0x2E67,
            0x2E68,
            0x2E69,
            0x2F51,
            0x2F52,
            0x2F53,
            0x2F54,
            0x2F55,
            0x2F56,
            0x2F57,
            0x2F58,
            0x2F59,
            0x2F5A,
            0x2F5B,
            0x2F5C,
            0x2F5D,
            0x2F5E,
            0x2F5F,
            0x2F60,
            0x2F61,
            0x2F62,
            0x2F63,
            0x2F64,
            0x2F65,
            0x2F66,
            0x2F67,
            0x2F68,
            0x2F69,
            0x3051,
            0x3052,
            0x3053,
            0x3054,
            0x3055,
            0x3056,
            0x3057,
            0x3058,
            0x3059,
            0x305A,
            0x305B,
            0x305C,
            0x305D,
            0x305E,
            0x305F,
            0x3060,
            0x3061,
            0x3062,
            0x3063,
            0x3064,
            0x3065,
            0x3066,
            0x3067,
            0x3068,
            0x3069,
            0x3151,
            0x3152,
            0x3153,
            0x3154,
            0x3155,
            0x3156,
            0x3157,
            0x3158,
            0x3159,
            0x315A,
            0x315B,
            0x315C,
            0x315D,
            0x315E,
            0x315F,
            0x3160,
            0x3161,
            0x3162,
            0x3163,
            0x3164,
            0x3165,
            0x3166,
            0x3167,
            0x3168,
            0x3169,
            0x3251,
            0x3252,
            0x3253,
            0x3254,
            0x3255,
            0x3256,
            0x3257,
            0x3258,
            0x3259,
            0x325A,
            0x325B,
            0x325C,
            0x325D,
            0x325E,
            0x325F,
            0x3260,
            0x3261,
            0x3262,
            0x3263,
            0x3264,
            0x3265,
            0x3266,
            0x3267,
            0x3268,
            0x3269,
            0x3351,
            0x3352,
            0x3353,
            0x3354,
            0x3355,
            0x3356,
            0x3357,
            0x3358,
            0x3359,
            0x335A,
            0x335B,
            0x335C,
            0x335D,
            0x335E,
            0x335F,
            0x3360,
            0x3361,
            0x3362,
            0x3363,
            0x3364,
            0x3365,
            0x3366,
            0x3367,
            0x3368,
            0x3369,
            0x3451,
            0x3452,
            0x3453,
            0x3454,
            0x3455,
            0x3456,
            0x3457,
            0x3458,
            0x3459,
            0x345A,
            0x345B,
            0x345C,
            0x345D,
            0x345E,
            0x345F,
            0x3460,
            0x3461,
            0x3462,
            0x3463,
            0x3464,
            0x3465,
            0x3466,
            0x3467,
            0x3468,
            0x3469,
            0x3551,
            0x3552,
            0x3553,
            0x3554,
            0x3555,
            0x3556,
            0x3557,
            0x3558,
            0x3559,
            0x355A,
            0x355B,
            0x355C,
            0x355D,
            0x355E,
            0x355F,
            0x3560,
            0x3561,
            0x3562,
            0x3563,
            0x3564,
            0x3565,
            0x3566,
            0x3567,
            0x3568,
            0x3569,
            0x3651,
            0x3652,
            0x3653,
            0x3654,
            0x3655,
            0x3656,
            0x3657,
            0x3658,
            0x3659,
            0x365A,
            0x365B,
            0x365C,
            0x365D,
            0x365E,
            0x365F,
            0x3660,
            0x3661,
            0x3662,
            0x3663,
            0x3664,
            0x3665,
            0x3666,
            0x3667,
            0x3668,
            0x3669,
            0x3751,
            0x3752,
            0x3753,
            0x3754,
            0x3755,
            0x3756,
            0x3757,
            0x3758,
            0x3759,
            0x375A,
            0x375B,
            0x375C,
            0x375D,
            0x375E,
            0x375F,
            0x3760,
            0x3761,
            0x3762,
            0x3763,
            0x3764,
            0x3765,
            0x3766,
            0x3767,
            0x3768,
            0x3769,
            0x3851,
            0x3852,
            0x3853,
            0x3854,
            0x3855,
            0x3856,
            0x3857,
            0x3858,
            0x3859,
            0x385A,
            0x385B,
            0x385C,
            0x385D,
            0x385E,
            0x385F,
            0x3860,
            0x3861,
            0x3862,
            0x3863,
            0x3864,
            0x3865,
            0x3866,
            0x3867,
            0x3868,
            0x3869,
            0x3951,
            0x3952,
            0x3953,
            0x3954,
            0x3955,
            0x3956,
            0x3957,
            0x3958,
            0x3959,
            0x395A,
            0x395B,
            0x395C,
            0x395D,
            0x395E,
            0x395F,
            0x3960,
            0x3961,
            0x3962,
            0x3963,
            0x3964,
            0x3965,
            0x3966,
            0x3967,
            0x3968,
            0x3969,
            0x3A51,
            0x3A52,
            0x3A53,
            0x3A54,
            0x3A55,
            0x3A56,
            0x3A57,
            0x3A58,
            0x3A59,
            0x3A5A,
            0x3A5B,
            0x3A5C,
            0x3A5D,
            0x3A5E,
            0x3A5F,
            0x3A60,
            0x3A61,
            0x3A62,
            0x3A63,
            0x3A64,
            0x3A65,
            0x3A66,
            0x3A67,
            0x3A68,
            0x3A69,
            0x3B51,
            0x3B52,
            0x3B53,
            0x3B54,
            0x3B55,
            0x3B56,
            0x3B57,
            0x3B58,
            0x3B59,
            0x3B5A,
            0x3B5B,
            0x3B5C,
            0x3B5D,
            0x3B5E,
            0x3B5F,
            0x3B60,
            0x3B61,
            0x3B62,
            0x3B63,
            0x3B64,
            0x3B65,
            0x3B66,
            0x3B67,
            0x3B68,
            0x3B69,
            0x3C51,
            0x3C52,
            0x3C53,
            0x3C54,
            0x3C55,
            0x3C56,
            0x3C57,
            0x3C58,
            0x3C59,
            0x3C5A,
            0x3C5B,
            0x3C5C,
            0x3C5D,
            0x3C5E,
            0x3C5F,
            0x3C60,
            0x3C61,
            0x3C62,
            0x3C63,
            0x3C64,
            0x3C65,
            0x3C66,
            0x3C67,
            0x3C68,
            0x3C69,
            0x3D51,
            0x3D52,
            0x3D53,
            0x3D54,
            0x3D55,
            0x3D56,
            0x3D57,
            0x3D58,
            0x3D59,
            0x3D5A,
            0x3D5B,
            0x3D5C,
            0x3D5D,
            0x3D5E,
            0x3D5F,
            0x3D60,
            0x3D61,
            0x3D62,
            0x3D63,
            0x3D64,
            0x3D65,
            0x3D66,
            0x3D67,
            0x3D68,
            0x3D69,
            0x3E51,
            0x3E52,
            0x3E53,
            0x3E54,
            0x3E55,
            0x3E56,
            0x3E57,
            0x3E58,
            0x3E59,
            0x3E5A,
            0x3E5B,
            0x3E5C,
            0x3E5D,
            0x3E5E,
            0x3E5F,
            0x3E60,
            0x3E61,
            0x3E62,
            0x3E63,
            0x3E64,
            0x3E65,
            0x3E66,
            0x3E67,
            0x3E68,
            0x3E69,
            0x3F51,
            0x3F52,
            0x3F53,
            0x3F54,
            0x3F55,
            0x3F56,
            0x3F57,
            0x3F58,
            0x3F59,
            0x3F5A,
            0x3F5B,
            0x3F5C,
            0x3F5D,
            0x3F5E,
            0x3F5F,
            0x3F60,
            0x3F61,
            0x3F62,
            0x3F63,
            0x3F64,
            0x3F65,
            0x3F66,
            0x3F67,
            0x3F68,
            0x3F69,
            0x4051,
            0x4052,
            0x4053,
            0x4054,
            0x4055,
            0x4056,
            0x4057,
            0x4058,
            0x4059,
            0x405A,
            0x405B,
            0x405C,
            0x405D,
            0x405E,
            0x405F,
            0x4060,
            0x4061,
            0x4062,
            0x4063,
            0x4064,
            0x4065,
            0x4066,
            0x4067,
            0x4068,
            0x4069,
            0x4151,
            0x4152,
            0x4153,
            0x4154,
            0x4155,
            0x4156,
            0x4157,
            0x4158,
            0x4159,
            0x415A,
            0x415B,
            0x415C,
            0x415D,
            0x415E,
            0x415F,
            0x4160,
            0x4161,
            0x4162,
            0x4163,
            0x4164,
            0x4165,
            0x4166,
            0x4167,
            0x4168,
            0x4169,
            0x4251,
            0x4252,
            0x4253,
            0x4254,
            0x4255,
            0x4256,
            0x4257,
            0x4258,
            0x4259,
            0x425A,
            0x425B,
            0x425C,
            0x425D,
            0x425E,
            0x425F,
            0x4260,
            0x4261,
            0x4262,
            0x4263,
            0x4264,
            0x4265,
            0x4266,
            0x4267,
            0x4268,
            0x4269,
            0x4351,
            0x4352,
            0x4353,
            0x4354,
            0x4355,
            0x4356,
            0x4357,
            0x4358,
            0x4359,
            0x435A,
            0x435B,
            0x435C,
            0x435D,
            0x435E,
            0x435F,
            0x4360,
            0x4361,
            0x4362,
            0x4363,
            0x4364,
            0x4365,
            0x4366,
            0x4367,
            0x4368,
            0x4369,
            0x4451,
            0x4452,
            0x4453,
            0x4454,
            0x4455,
            0x4456,
            0x4457,
            0x4458,
            0x4459,
            0x445A,
            0x445B,
            0x445C,
            0x445D,
            0x445E,
            0x445F,
            0x4460,
            0x4461,
            0x4462,
            0x4463,
            0x4464,
            0x4465,
            0x4466,
            0x4467,
            0x4468,
            0x4469,
            0x4551,
            0x4552,
            0x4553,
            0x4554,
            0x4555,
            0x4556,
            0x4557,
            0x4558,
            0x4559,
            0x455A,
            0x455B,
            0x455C,
            0x455D,
            0x455E,
            0x455F,
            0x4560,
            0x4561,
            0x4562,
            0x4563,
            0x4564,
            0x4565,
            0x4566,
            0x4567,
            0x4568,
            0x4569,
            0x4651,
            0x4652,
            0x4653,
            0x4654,
            0x4655,
            0x4656,
            0x4657,
            0x4658,
            0x4659,
            0x465A,
            0x465B,
            0x465C,
            0x465D,
            0x465E,
            0x465F,
            0x4660,
            0x4661,
            0x4662,
            0x4663,
            0x4664,
            0x4665,
            0x4666,
            0x4667,
            0x4668,
            0x4669,
            0x4751,
            0x4752,
            0x4753,
            0x4754,
            0x4755,
            0x4756,
            0x4757,
            0x4758,
            0x4759,
            0x475A,
            0x475B,
            0x475C,
            0x475D,
            0x475E,
            0x475F,
            0x4760,
            0x4761,
            0x4762,
            0x4763,
            0x4764,
            0x4765,
            0x4766,
            0x4767,
            0x4768,
            0x4769,
            0x4851,
            0x4852,
            0x4853,
            0x4854,
            0x4855,
            0x4856,
            0x4857,
            0x4858,
            0x4859,
            0x485A,
            0x485B,
            0x485C,
            0x485D,
            0x485E,
            0x485F,
            0x4860,
            0x4861,
            0x4862,
            0x4863,
            0x4864,
            0x4865,
            0x4866,
            0x4867,
            0x4868,
            0x4869,
            0x4951,
            0x4952,
            0x4953,
            0x4954,
            0x4955,
            0x4956,
            0x4957,
            0x4958,
            0x4959,
            0x495A,
            0x495B,
            0x495C,
            0x495D,
            0x495E,
            0x495F,
            0x4960,
            0x4961,
            0x4962,
            0x4963,
            0x4964,
            0x4965,
            0x4966,
            0x4967,
            0x4968,
            0x4969,
            0x4A51,
            0x4A52,
            0x4A53,
            0x4A54,
            0x4A55,
            0x4A56,
            0x4A57,
            0x4A58,
            0x4A59,
            0x4A5A,
            0x4A5B,
            0x4A5C,
            0x4A5D,
            0x4A5E,
            0x4A5F,
            0x4A60,
            0x4A61,
            0x4A62,
            0x4A63,
            0x4A64,
            0x4A65,
            0x4A66,
            0x4A67,
            0x4A68,
            0x4A69,
            0xEE77,
            0xEE78,
            0xEE79,
            0xEE7A,
            0xEE7B,
            0xEE7C,
            0xEE7D,
            0xEE7E,
            0xEE7F,
            0xEE80,
            0xEE81,
            0xEE82,
            0xEE83,
            0xEE84,
            0xEE85,
            0xEE86,
            0xEE87,
            0xEF77,
            0xEF78,
            0xEF79,
            0xEF7A,
            0xEF7B,
            0xEF7C,
            0xEF7D,
            0xEF7E,
            0xEF7F,
            0xEF80,
            0xEF81,
            0xEF82,
            0xEF83,
            0xEF84,
            0xEF85,
            0xEF86,
            0xEF87,
            0xF077,
            0xF078,
            0xF079,
            0xF07A,
            0xF07B,
            0xF07C,
            0xF07D,
            0xF07E,
            0xF07F,
            0xF080,
            0xF081,
            0xF082,
            0xF083,
            0xF084,
            0xF085,
            0xF086,
            0xF087,
            0xF177,
            0xF178,
            0xF179,
            0xF17A,
            0xF17B,
            0xF17C,
            0xF17D,
            0xF17E,
            0xF17F,
            0xF180,
            0xF181,
            0xF182,
            0xF183,
            0xF184,
            0xF185,
            0xF186,
            0xF187,
            0xF277,
            0xF278,
            0xF279,
            0xF27A,
            0xF27B,
            0xF27C,
            0xF27D,
            0xF27E,
            0xF27F,
            0xF280,
            0xF281,
            0xF282,
            0xF283,
            0xF284,
            0xF285,
            0xF286,
            0xF287,
            0xF377,
            0xF378,
            0xF379,
            0xF37A,
            0xF37B,
            0xF37C,
            0xF37D,
            0xF37E,
            0xF37F,
            0xF380,
            0xF381,
            0xF382,
            0xF383,
            0xF384,
            0xF385,
            0xF386,
            0xF387,
            0xF477,
            0xF478,
            0xF479,
            0xF47A,
            0xF47B,
            0xF47C,
            0xF47D,
            0xF47E,
            0xF47F,
            0xF480,
            0xF481,
            0xF482,
            0xF483,
            0xF484,
            0xF485,
            0xF486,
            0xF487,
            0xF577,
            0xF578,
            0xF579,
            0xF57A,
            0xF57B,
            0xF57C,
            0xF57D,
            0xF57E,
            0xF57F,
            0xF580,
            0xF581,
            0xF582,
            0xF583,
            0xF584,
            0xF585,
            0xF586,
            0xF587,
            0xF677,
            0xF678,
            0xF679,
            0xF67A,
            0xF67B,
            0xF67C,
            0xF67D,
            0xF67E,
            0xF67F,
            0xF680,
            0xF681,
            0xF682,
            0xF683,
            0xF684,
            0xF685,
            0xF686,
            0xF687,
            0xF777,
            0xF778,
            0xF779,
            0xF77A,
            0xF77B,
            0xF77C,
            0xF77D,
            0xF77E,
            0xF77F,
            0xF780,
            0xF781,
            0xF782,
            0xF783,
            0xF784,
            0xF785,
            0xF786,
            0xF787,
            0xF877,
            0xF878,
            0xF879,
            0xF87A,
            0xF87B,
            0xF87C,
            0xF87D,
            0xF87E,
            0xF87F,
            0xF880,
            0xF881,
            0xF882,
            0xF883,
            0xF884,
            0xF885,
            0xF886,
            0xF887,
            0xF977,
            0xF978,
            0xF979,
            0xF97A,
            0xF97B,
            0xF97C,
            0xF97D,
            0xF97E,
            0xF97F,
            0xF980,
            0xF981,
            0xF982,
            0xF983,
            0xF984,
            0xF985,
            0xF986,
            0xF987,
            0xFA77,
            0xFA78,
            0xFA79,
            0xFA7A,
            0xFA7B,
            0xFA7C,
            0xFA7D,
            0xFA7E,
            0xFA7F,
            0xFA80,
            0xFA81,
            0xFA82,
            0xFA83,
            0xFA84,
            0xFA85,
            0xFA86,
            0xFA87,
            0xFB77,
            0xFB78,
            0xFB79,
            0xFB7A,
            0xFB7B,
            0xFB7C,
            0xFB7D,
            0xFB7E,
            0xFB7F,
            0xFB80,
            0xFB81,
            0xFB82,
            0xFB83,
            0xFB84,
            0xFB85,
            0xFB86,
            0xFB87,
            0xFC77,
            0xFC78,
            0xFC79,
            0xFC7A,
            0xFC7B,
            0xFC7C,
            0xFC7D,
            0xFC7E,
            0xFC7F,
            0xFC80,
            0xFC81,
            0xFC82,
            0xFC83,
            0xFC84,
            0xFC85,
            0xFC86,
            0xFC87,
            0xF275,
            0xF276,
            0xF375,
            0xF376,
            0xF475,
            0xF476,
            0xF575,
            0xF576,
            0xF675,
            0xF676,
            0xF775,
            0xF776,
            0xF875,
            0xF876,
            0xF374,
            0xF474,
            0xF574,
            0xF674,
        };

        public static HashSet<ushort> SpeedRunLandblock_Landblocks = new HashSet<ushort>()
        {
            0x9204,
            0x9203,
            0x9202,
        };
    }
}
